<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Lottery Picker</title>
  <style>
    body {
      font-family: sans-serif;
      max-width: 600px;
      margin: 0 auto;
      padding: 20px;
      box-sizing: border-box;
    }
    h1 {
      text-align: center;
    }
    
/* General rule for inputs and labels */
label, textarea, input {
  display: block;
  margin-bottom: 10px;
  width: 100%;
  box-sizing: border-box;
}

/* Override for checkbox labels */
label.checkbox-label {
  display: flex;
  align-items: center;
  width: auto;
}

label.checkbox-label input[type="checkbox"] {
  width: auto;
  margin-right: 8px;
}
    textarea {
      height: 100px;
    }
    button {
      padding: 10px 15px;
      margin-top: 10px;
      width: 100%;
      box-sizing: border-box;
    }
    #output {
      margin-top: 20px;
      font-weight: bold;
      text-align: center;
    }
    @media (max-width: 600px) {
      input, textarea, button {
        font-size: 1.1em;
      }
    }
  </style>
</head>
<body>
  <h1>Lottery Picker</h1>

  <label>Range (Floor - Ceiling):</label>
  <input id="floor" type="number" placeholder="e.g., 1" value="1" />
  <input id="ceiling" type="number" placeholder="e.g., 49" value="49" />

  <label>Number of Draws (N):</label>
  <input id="numDraws" type="number" value="6" />

<label class="checkbox-label">
  <input type="checkbox" id="allowRepeats" />
  Allow repeats
</label>

<label class="checkbox-label">
  <input type="checkbox" id="skipHistory" checked />
  Skip historical combinations
</label>

<label class="checkbox-label">
  <input type="checkbox" id="useLuckyProb" />
  Use lucky/unlucky probabilities
</label>

  <label>Historical Combinations:</label>
  <textarea id="historyInput"></textarea>

  <button onclick="generate()">Generate</button>

  <div id="output"></div>

  <script>
    const luckyNumbers = [28, 16, 39, 32, 15];
    const unluckyNumbers = [47, 46, 43, 41, 44];

    // Load default history.txt if present
    window.onload = function () {
      fetch('history.txt')
        .then(res => res.text())
        .then(data => {
          document.getElementById('historyInput').value = data.trim();
        })
        .catch(() => {
          console.log('No history.txt found, using blank history.');
        });
    };

    function generateWeightedNumbers(floor, ceiling, useLuckyProb) {
      const weights = [];
      let numbers_in_range = ceiling - floor + 1;
      for (let i = floor; i <= ceiling; i++) {
        let weight = 100 / numbers_in_range;
        if (useLuckyProb) {
          if (luckyNumbers.includes(i)) weight *= 1.2;
          if (unluckyNumbers.includes(i)) weight *= 0.7;
        }
        weights.push({ num: i, weight });
      }
      return weights;
    }

    function drawNumbers(weights, count, allowRepeats) {
      const results = [];
      let totalWeight = weights.reduce((acc, w) => acc + w.weight, 0);

      for (let i = 0; i < count; i++) {
        let rnd = Math.random() * totalWeight;
        for (let j = 0; j < weights.length; j++) {
          rnd -= weights[j].weight;
          if (rnd <= 0) {
            results.push(weights[j].num);
            if (!allowRepeats) {
              totalWeight -= weights[j].weight;
              weights.splice(j, 1);
            }
            break;
          }
        }
      }
      return results;
    }

    function parseHistory(text) {
      return text.trim().split('\n').map(line => line.trim().split(',').map(n => parseInt(n.trim())).sort((a, b) => a - b).join(','));
    }

    function generate() {
      const floor = parseInt(document.getElementById('floor').value);
      const ceiling = parseInt(document.getElementById('ceiling').value);
      const numDraws = parseInt(document.getElementById('numDraws').value);
      const allowRepeats = document.getElementById('allowRepeats').checked;
      const skipHistory = document.getElementById('skipHistory').checked;
      const useLuckyProb = document.getElementById('useLuckyProb').checked;

      const historyText = document.getElementById('historyInput').value;
      const historySet = new Set(parseHistory(historyText));

      let attempt = 0, maxAttempts = 1000;
      let result;
      while (attempt < maxAttempts) {
        const weights = generateWeightedNumbers(floor, ceiling, useLuckyProb);
        const draw = drawNumbers([...weights], numDraws, allowRepeats).sort((a, b) => a - b);
        const key = draw.join(',');
        if (!skipHistory || !historySet.has(key)) {
          result = draw;
          break;
        }
        attempt++;
      }

      const output = document.getElementById('output');
      output.innerText = result ? `Generated: ${result.join(', ')}` : 'Failed to generate a unique result.';
    }
  </script>
</body>
</html>
